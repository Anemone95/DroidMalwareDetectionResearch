<?xml version="1.0" encoding="UTF-8"?>
<project name="checkers" default="debug">

    <condition property="jdkName" value="jdk7.jar" else="jdk6.jar">
        <contains string="${java.version}" substring="1.7"/>
    </condition>

    <presetdef name="jsr308.javac">
    <javac fork="yes" executable="${checker-framework_dir}/checker/bin/javac">
      <!-- JSR308 related compiler arguments -->
      <compilerarg value="-version"/>
      <!-- optional, so .class files work with older JVMs: <compilerarg line="-target 5"/> -->
      <compilerarg value="-implicit:class"/>
      <!-- optional, to issue warnings instead of errors: <compilerarg line="-Awarns -Xmaxwarns 10000"/> -->
	<compilerarg line="-Awarns -Xmaxwarns 10000"/>
<!-- Used to connect with the eclipse debugger	 <compilerarg line="-J-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"/>-->
        <!--<compilerarg value="-J-Xbootclasspath/p:${checker-framework_dir}/checker/bin/jsr308-all.jar"/>

      <classpath>
        <pathelement location="${checker-framework_dir}/dist/checker.jar"/>
      </classpath>-->
    </javac>
    </presetdef>
    
    
    <!--depends="-set-release-mode, -release-obfuscation-check, -package, -post-package, -release-prompt-for-password, -release-nosign, -release-sign, -post-build"-->

    <!-- Apply a type processor to all files in the project. -->
    <macrodef name="process-proj">
        <!-- The processor to apply. -->
        <attribute name="processor"/>
        <attribute name="stub" default="${stubs}"/>
         <attribute name="flowPolicy" default="${flowPolicy}"/>
        <!-- Optional additional tasks to perform at the end. -->
        <element name="more-tasks" optional="yes"/>
        <sequential>
            <condition property="extensible.libs.classpath"
                   value="${tested.project.absolute.dir}/${jar.libs.dir}"
                   else="${jar.libs.dir}">
                <isset property="tested.project.absolute.dir" />
            </condition>
            <!-- Option to show all subtyping tests. -->
            <condition property="showchecks"
                   value="-Ashowchecks -AprintErrorStack"
                   else="">
                <equals arg1="${debug}" arg2="true" />
            </condition>

            <condition property="checkerFrameworkOpts" value="${cfOpts}" else="">
                <isset property="cfOpts"/>
            </condition>

            <!-- Option to enforce stricter checks, in particular for casts. -->
            <!-- Note that only one -Alint argument can be provided. -->
            <condition property="strictoptions"
                   value="-AcheckCastElementType -AinvariantArrays -Acheckconditionals=true"
                   else="">
                <or>
                    <equals arg1="${stricter}" arg2="true" />
                    <equals arg1="${sound}" arg2="true" />                
                </or>
            </condition>

            <!--classpathref="android.target.classpath"-->
            <jsr308.javac
                   destdir="${out.classes.absolute.dir}"
                   classpathref="project.target.class.path"
                   includeantruntime="false">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <classpath>
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                    <pathelement location="${sparta-code_dir}/sparta.jar"/>
                </classpath>
                <compilerarg line="${java.compilerargs} ${showchecks} ${strictoptions}" />
                <compilerarg line=" -processor @{processor} -Astubs=@{stub} -AflowPolicy=@{flowPolicy}  ${checkerFrameworkOpts}"/>
                <compilerarg line="-encoding ISO8859-1 -AprintErrorStack -AsuppressWarnings=purity.invalid.overriding " />
            </jsr308.javac>
            <more-tasks/>
        </sequential>
    </macrodef>

    <macrodef name="javamain-proj">
        <!-- The class with main to apply. -->
        <attribute name="classname"/>
        <!-- The output from java goes here. -->
        <attribute name="output"/>
        <!-- Optional additional tasks to perform at the end. -->
        <element name="more-tasks" optional="yes"/>
        <sequential>
            <condition property="extensible.libs.classpath"
                    value="${tested.project.absolute.dir}/${jar.libs.dir}"
                    else="${jar.libs.dir}">
                <isset property="tested.project.absolute.dir" />
            </condition>

            <property name="classpath"
                value="${checker-framework_dir}/checker/dist/${jdkName}:${checker-framework_dir}/checker/dist/javac.jar:${checker-framework_dir}/checker/dist/checker.jar:${sparta-code_dir}/bin/:${sparta-code_dir}/build/:${sparta-code_dir}/sparta.jar:"/>

            <fileset dir="${source.absolute.dir}" id="mySourceJava">
                <include name="**/*.java" />
            </fileset>
            <pathconvert property="cmdSourceJava" refid="mySourceJava" pathsep="' '" />

            <fileset dir="${gen.absolute.dir}" id="myGenJava">
                <include name="**/*.java" />
            </fileset>
            <pathconvert property="cmdGenJava" refid="myGenJava" pathsep="' '" />

            <java fork="true" classname="@{classname}"
                output="@{output}">
                <arg line="'${cmdSourceJava}'"/>
                <arg line="'${cmdGenJava}'"/>
                <classpath>
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                </classpath>
                <classpath refid="project.target.class.path" />

                <jvmarg value="-Xbootclasspath/p:${classpath}"/>

                <env key="CLASSPATH" value="${classpath}"/>
            </java>
            <echo>Result written to @{output}</echo>
            <more-tasks/>
        </sequential>
    </macrodef>

    <target name="-setup-check-flow">
        <property name="build.target" value="check-flow" />
    </target>
    
    <target name="check-intent"
                depends="clean,-setup-check-flow, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="check for check-intent.">
            <condition property="cMap" value="${componentMap}" else="component-map">
                <isset property="componentMap"/>
            </condition>
        <property name="cfOpts" value="-AcomponentMap=${cMap}"/>
        <process-proj processor="sparta.checkers.intents.IntentChecker"/>
    </target>

    <target name="check-nullness"
                depends="clean,-setup-check-flow, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="check for check-flow.">
        <process-proj processor="NullnessChecker"/>
    </target>
    <target name="check-flow"
                depends="clean,-setup-check-flow, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="check for check-flow.">
        <process-proj processor="sparta.checkers.FlowChecker"/>
    </target>
    
    <target name="-setup-check-value">
        <property name="build.target" value="check-value" />
    </target>
    <target name="check-value"
                depends="clean, -setup-check-value, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="run the Value Checker">
        <process-proj processor="org.checkerframework.common.value.ValueChecker"/>
    </target>
    
    <target name="-setup-report-not-reviewed">
        <property name="build.target" value="report-not-reviewed" />
    </target>
    <target name="report-not-reviewed"
                depends="clean,-setup-report-not-reviewed, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="Reports methods, fields, or constructors that have not been reviewed.">
        <process-proj  processor="sparta.checkers.NotReviewedLibraryChecker"/>
    </target>
    
    <target name="check-intentkey"
                depends="clean, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="run the IntentKey Checker">
        <process-proj processor="sparta.checkers.util.IntentKeyChecker"/>
    </target>

    <target name="check-intentstats"
                depends="clean, -build-setup,-set-release-mode,-code-gen, -post-package"
                description="run the IntentStats Checker">
        <process-proj processor="sparta.checkers.util.IntentStatsChecker"/>
    </target>

    <target name="filter-flows">
        <property name="filter.flow_file" value="./sparta-out/forbiddenFlowLocations.txt" />
        <property name="filter" value="" />
        <exec executable="${sparta-code_dir}/filter-flows.pl">
                    <arg line="--flow-file ${filter.flow_file}" />
                    <arg line="--filter '${filter}'" />
        </exec><echo/>
    </target>

    <target name="capture-strings"
                depends="clean,-setup-check-flow, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="capture string literals.">
                <property name="capture.dirs" value="src AndroidManifest.xml" />
                <property name="capture.outfile" value="sparta_strings.txt" />
                <echo>Capture string literals from source</echo><echo/>
                <exec executable="${sparta-code_dir}/capture-strings.pl">
                    <arg line="--dirs '${capture.dirs}'" />
                    <arg line="--outfile ${capture.outfile}" />
                </exec><echo/>
    </target>
    
    <target name="compare-strings"
                depends="clean,-setup-check-flow, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="compare string literals.">
                <property name="compare.source_strings" value="sparta_strings.txt" />
                <property name="compare.search_file" value="sparta_strings.txt" />
                <echo>Compare string literals from other packages</echo><echo/>
                <exec executable="${sparta-code_dir}/compare-strings.pl">
                    <arg line="--source-strings ${compare.source_strings}"/>
                    <arg line="--search_file ${compare.search_file}"/>
                    <arg line="--root-dir ${compare.root}"/>
                </exec><echo/>
    </target>

    <target name="check-flow-pp"
                depends="clean,-setup-check-flow, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="runs the Flow Checker and outputs the information flow types as PERMISSION -> PERMISSION instead of @Source(PERMISISON) @Sink(PERMISSION) " >
        <property name="cfOpts" value="-AprettyPrint="/>
        <process-proj  processor="sparta.checkers.FlowChecker"/>
    </target>

    
        <target name="check-conditionals"
            depends="clean, -build-setup,-set-release-mode,-code-gen, -post-package"
            description="Output all the locations a sensitive source is used in a conditional.">
        <property name="cfOpts" value="-Acheckconditionals=true"/>
        <process-proj processor="sparta.checkers.FlowChecker"/>
    </target>

    <target name="-setup-reqperms">
        <property name="build.target" value="reqperms" />
    </target>

    <target name="report-permissions"
                depends="clean,-setup-reqperms,-build-setup,-set-release-mode,-code-gen, -post-package" 
                description="check for both required permissions and dependent permissions.">
        <process-proj processor="sparta.checkers.permission.PermissionsChecker"/>
    </target>

    <target name="reqperms"
                depends="clean,-setup-reqperms,-build-setup,-set-release-mode,-code-gen, -post-package" 
                description="check for required permissions.">
        <process-proj processor="sparta.checkers.permission.RequiredPermissionsChecker"/>
    </target>

    <target name="reqdependentperms"
                depends="clean,-setup-reqperms,-build-setup,-set-release-mode,-code-gen, -post-package" 
                description="check for dependent permissions.">
        <process-proj processor="sparta.checkers.permission.DependentPermissionsChecker"/>
    </target>



<!--     <target name="flowshow" -->
<!--                 depends="-build-setup,-set-release-mode,-code-gen, -post-package"  -->
<!--                 description="show the flow annotations in the code."> -->
<!--         <process-proj processor="sparta.checkers.FlowShow"/> -->
<!--     </target> -->

<!--     <target name="flowshow-json" -->
<!--                 depends="-build-setup,-set-release-mode,-code-gen, -post-package"  -->
<!--                 description="show the flow annotations in the code with JSON."> -->
<!--         <javamain-proj classname="sparta.checkers.JsonJavac$FlowShowJson" -->
<!--             output="flowshow.json"/> -->
<!--     </target> -->

    <target name="-setup-report-suspicious">
        <property name="build.target" value="report-suspicious" />
    </target>
    <target name="-setup-report-strings">
        <property name="build.target" value="report-strings" />
    </target>
         <target name="report-strings"
                 depends="clean,-setup-report-strings, -build-setup,-set-release-mode,-code-gen, -post-package"
                 description="reports all static strings found by the ValueChecker">
         <process-proj processor="sparta.checkers.report.ReportValueChecker"/>
     </target>

    <target name="report-suspicious"
                depends="clean, -setup-report-suspicious, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="report suspicoius API usage.">
        	<!-- Run script to search for suspicious regexp pattern -->
        		<echo>Search for suspicious regexp pattern</echo><echo/>        		
                <exec executable="${sparta-code_dir}/suspicious.pl">
                      <arg value="."/>
                </exec><echo/>
            <!-- Run report checker -->
                <process-proj processor="sparta.checkers.report.ReportAPIChecker" stub="suspicious.astub"/>
    </target>

    <target name="reportapiusage"
                depends="-build-setup,-set-release-mode,-code-gen, -post-package" 
                description="report interesting API usage.">
        <process-proj processor="sparta.checkers.report.ReportAPIChecker" stub="apiusage.astub"/>
    </target>
    
    
       <target name="count-locations"
                depends="clean, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="Counts the number of places that could be annotated.">
        <process-proj processor="org.checkerframework.common.util.count.Locations" stub=""/>
       </target>
          
               <target name="count-annotations"
                depends="clean, -build-setup,-set-release-mode,-code-gen, -post-package" 
                description="Counts the number of annotations in the app.">
        <process-proj processor="org.checkerframework.common.util.count.AnnotationsCounter" stub=""/>
    </target>

<!-- no longer in use
    <target name="reportusage-json"
                depends="-build-setup,-set-release-mode,-code-gen, -post-package" 
                description="report interesting API usage with JSON.">
        <javamain-proj classname="sparta.checkers.JsonJavac$ReportUsageJson"
            output="reportusage.json"/>
    </target>

    <target name="reportusage-text"
                depends="-build-setup,-set-release-mode,-code-gen, -post-package" 
                description="report interesting API usage as text.">
        <javamain-proj classname="sparta.checkers.JsonJavac$ReportUsageText"
            output="reportusage.txt"/>
    </target>
-->

<!--     <target name="reportbinaryonly" -->
<!--                 depends="-build-setup,-set-release-mode,-code-gen, -post-package"  -->
<!--                 description="report binary-only method calls and field accesses."> -->
<!--         <process-proj processor="sparta.checkers.ReportBinaryChecker"/> -->
<!--     </target> -->

    <!-- Enable debugging for inference -->
    <target name="cfi-debug">
        <property name="debug" value="--debug"/>
    </target>
    <target name="-setup-infer">
        <property name="build.target" value="infer" />
    </target>
    <target name="-setup-infer-sink">
        <property name="build.target" value="infer-sink" />
    </target>
    <target name="-setup-infer-source">
        <property name="build.target" value="infer-source" />
    </target>
    <target name="infer" depends="-setup-infer,infer-source, infer-sink"
            description="Infer annotations">
    </target>
    <!-- Only run inference on @Source annotations -->
    <target name="infer-source" depends="-setup-infer-source,-build-setup, -set-release-mode, -code-gen, -post-package">
        <property name="debug" value=""/>

        <exec executable="/usr/bin/find">
            <arg line="src gen -name '*.unannotated' -exec rm {} ;" />
        </exec>

        <pathconvert property="cmdClasspath" refid="project.target.class.path" pathsep=":"/>

        <fileset dir="libs" id="projectLibs">
            <include name="**/*.jar" />
        </fileset>
        <pathconvert property="cmdLibs" refid="projectLibs" pathsep=":" />

        <fileset dir="${source.absolute.dir}" id="mySourceJava">
            <include name="**/*.java" />
        </fileset>
        <pathconvert property="cmdSourceJava" refid="mySourceJava" pathsep="' '" />

        <fileset dir="${gen.absolute.dir}" id="myGenJava">
            <include name="**/*.java" />
        </fileset>
        <pathconvert property="cmdGenJava" refid="myGenJava" pathsep="' '" />

        <exec executable="${env.CHECKER_INFERENCE}/scripts/inference" failonerror="true">
            <!--<arg line="- -solver sparta.checkers.SpartaSourceSolver" />-->
            <!--<arg line="- -solver checkers.inference.solver.DebugSolver" />-->
            <arg line="--typesystem sparta-source-SAT" />
            <arg line="--logLevel=ALL" />
            <arg line="--hacks" />
            <arg line="-m ROUNDTRIP" />
            <arg line="--inPlace" />
            <arg line="${debug}" />
            <arg line="-- -cp '${cmdClasspath}:${cmdLibs}:src/:gen/:.'" />
            <arg line="${cmdSourceJava} ${cmdGenJava}" />
        </exec>
    </target>
    <!-- Only run inference on @Sink annotations -->
    <target name="infer-sink" depends="-setup-infer-sink,-build-setup, -set-release-mode, -code-gen, -post-package">
        <property name="debug" value=""/>

        <exec executable="/usr/bin/find">
            <arg line="src gen -name '*.unannotated' -exec rm {} ;" />
        </exec>

        <pathconvert property="cmdClasspath" refid="project.target.class.path" pathsep=":"/>

        <fileset dir="libs" id="projectLibs">
            <include name="**/*.jar" />
        </fileset>
        <pathconvert property="cmdLibs" refid="projectLibs" pathsep=":" />

        <fileset dir="${source.absolute.dir}" id="mySourceJava">
            <include name="**/*.java" />
        </fileset>
        <pathconvert property="cmdSourceJava" refid="mySourceJava" pathsep="' '" />

        <fileset dir="${gen.absolute.dir}" id="myGenJava">
            <include name="**/*.java" />
        </fileset>
        <pathconvert property="cmdGenJava" refid="myGenJava" pathsep="' '" />

        <exec executable="${env.CHECKER_INFERENCE}/scripts/inference" failonerror="true">
            <arg line="--typesystem sparta-sink-SAT" />
            <arg line="--logLevel=ALL" />
            <arg line="--hacks" />
            <arg line="-m ROUNDTRIP" />
            <arg line="--inPlace" />
            <arg line="${debug}" />
            <arg line="-- -cp '${cmdClasspath}:${cmdLibs}:src/:gen/:.'" />
            <arg line="${cmdSourceJava} ${cmdGenJava}" />
        </exec>
    </target>
</project>
